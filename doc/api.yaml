openapi: 3.0.0
info:
  description: WASAText app backend REST API
  title: WASAText API
  version: 1.0.0
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/userID'
    put:
      summary: Sets username
      description: |-
        It sets the username for the specified userID.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: userID updated successfully

components:
  schemas:
    User:
      title: User
      description: "This object represents a single user"
      type: object
      properties:
        username:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        propic:
          type: string
        conversations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatPreview'
              - $ref: '#/components/schemas/GroupPreview'
    ChatPreview:
      title: ChatPreview
      description: "This object represents the preview of a single chat"
      type: object
      properties:
        recipient:
          $ref: '#/components/schemas/User'
        
    Chat:
      title: Chat
      description: "This object represents a single private chat"
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          minItems: 2
          maxItems: 2
          uniqueItems: true
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
    GroupPreview:
      title: GroupPreview
      description: "This object represents the preview of a single groupchat"
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
    Group:
      title: Group
      description: "This object represents a single group"
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          minItems: 2
          uniqueItems: true
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
        groupname:
          type: string
        grouphoto:
          type: string
    TextMessage:
      title: TextMessage
      description: "This object represents a single text message"
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        content:
          type: string
          minLength: 1
        sender:
          $ref: '#/components/schemas/User'
        checkmarks:
          type: number
          minimum: 0
          maximum: 2
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
          uniqueItems: true
    PhotoMessage:
      title: PhotoMessage
      description: "This object represents a single photo message"
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        content:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        checkmarks:
          type: number
          minimum: 0
          maximum: 2
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
          uniqueItems: true
    Reaction:
      title: Reaction
      description: "This object represents a single reaction to a message"
      type: object
      properties:
        sender:
          $ref: '#/components/schemas/User'
        emoticon:
          type: string
          enum: ["laugh", "sad", "thumbs_up", "surprised", "love", "pray"]
  parameters:
    userID:
      schema:
        type: string
        example: abcd
        readOnly: true
      name: id
      in: path
      required: true
      description: User ID
    username:
      schema:
        type: string
        example: Maria
        pattern: 'ˆ.*?$'
        minLength: 3
        maxLength: 16
      name: username
      in: query
      description: Username



