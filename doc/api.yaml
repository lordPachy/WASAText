openapi: 3.0.0
info:
  description: WASAText app backend REST API
  title: WASAText API
  version: 1.0.0
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/securitySchemes/userID'

  /session/settings/username:
    put:
      summary: Sets username
      operationId: setMyUserName
      requestBody:
        description: username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
        required: true
      responses:
        '201':
          description: Username updated successfully
      security:
      - userID: []
  /session/settings/profilepicture:
    put:
      summary: Sets profile picture
      operationId: setMyPhoto
      requestBody:
        description: photo to be uploaded
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '202':
          description: Photo updated successfully
      security:
      - userID: []
  /session/conversations:
    get:
      summary: Gets all conversations
      description: |-
        It gets all the conversations (both private chats and groups) for the specified user.
      operationId: getMyConversations
      responses:
        '200':
          description: Conversations obtained successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Conversations'
      security:
      - userID: []
  /session/conversations/{conversationid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    get:
      summary: Gets a conversation
      description: |-
        It retrieves a specific conversation (be it a private chat or a group for a specific User).
      operationId: getConversation
      responses:
        '200':
          description: Conversation obtained successfully
          content: 
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Chat'
                  - $ref: '#/components/schemas/Group'
        '404':
          description: Conversation not found
      security:
      - userID: []
    post:
      summary: Send a message
      description: |-
        It sends a message to a specific conversation (be it a private chat or a group for a specific User).
      operationId: sendMessage
      requestBody:
        description: messasge to be sent
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TextMessage'
                - $ref: '#/components/schemas/PhotoMessage'
      responses:
        '202':
          description: Message sent successfully
        '404':
          description: conversation not found
      security:
      - userID: []
    delete:
      summary: Leave a group
      description: If the current conversation is a group, you leave the group. Otherwise, it throws an error.
      operationId: leaveGroup
      responses:
        '204':
          description: Group left successfully
        '403': 
          description: The current conversation is not a group.
        '404': 
          description: Conversation not found.
  /session/conversations/{conversationid}/settings/groupname:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    put:
      summary: Sets group name
      description: It sets the name of a group.
      operationId: setGroupName
      requestBody:
        description: groupname
        content:
          application/json:
            schema:
              type: string
              minLength: 1
      responses:
        '202':
          description: Name updated successfully
        '404':
          description: Conversation not found
      security:
      - userID: []
  /session/conversations/{conversationid}/settings/grouphoto:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    put:
      summary: It sets the photo of a group
      description: |-
        It sets the name of a group.
      operationId: setGroupPhoto
      requestBody:
        description: group photo
        content:
          application/json:
            schema:
              type: string
              format: byte
      responses:
        '202':
          description: Photo updated successfully
        '404':
          description: conversation not found
      security:
      - userID: []
  /session/conversations/{conversationid}/{messageid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
      - $ref: '#/components/parameters/messageid'
    put:
      summary: Comment a message
      description: |-
        It puts a single reaction to a message.
      operationId: commentMessage
      requestBody:
        description: reaction to be put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
      responses:
        '202':
          description: Reaction added successfully
        '404':
          description: conversation and/or message not found
      security:
      - userID: []
    post:
        summary: Forward a message
        description: |-
          It forwards a message to another chat.
        operationId: forwardMessage
        requestBody:
          description: conversation where message is forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationid'
        responses:
          '202':
            description: Message forwarded successfully
          '404':
            description: conversation and/or message not found
        security:
        - userID: []
    delete:
      summary: Delete a message
      description: |-
        It deletes a sent message.
      operationId: deleteMessage
      responses:
        '204':
          description: Message deleted
        '403':
          description: Message was not sent by you
        '404':
          description: Conversation and/or message not found
      security:
      - userID: []
  /session/conversations/{conversationid}/{messageid}/{reactionid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
      - $ref: '#/components/parameters/messageid'
      - $ref: '#/components/parameters/reactionid'
    delete:
      summary: Delete a comment
      description: |-
        It deletes a comment to a given message.
      operationId: uncommentMessage
      responses:
        '204':
          description: Comment deleted
        '403':
          description: Comment was not sent by you
        '404':
          description: Conversation and/or message and/or reaction not found
      security:
      - userID: []

  /session/conversations/new:
    put:
      summary: Add to group
      description: |-
        It adds a person to a group via a username. If the group does not exist, it creates it. If the adder is not in the group, an error is thrown.
      operationId: addToGroup
      requestBody:
        description: user and group
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                    $ref: '#/components/schemas/username'
                group:
                    $ref: '#/components/schemas/conversationid'
        required: true
      responses:
        '201':
          description: A new group with that user has been created
        '202':
          description: User added successfully
        '403':
          description: Users can only be added in groups you take part in
        '404':
          description: Conversation and/or user not found
      security:
      - userID: []

components:
  schemas:
    username:
      title: username
      description: This object represents a username
      type: string
      example: Maria
      pattern: 'ˆ.*?$'
      minLength: 3
      maxLength: 16
    conversationid:
      title: conversationid
      description: This object represents a conversation id
      type: integer
      example: 1
    messageid:
      title: message id
      description: This object represents a message id
      type: integer
      example: 1
    reactionid:
      title: reaction id
      description: This object represents a reaction id
      type: integer
      example: 1
    User:
      title: User
      description: "This object represents a single user"
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        propic:
          type: string
          format: binary
    Conversations:
      title: Conversations
      description: This object represents the whole list of a single user's Conversations
      type: object
      properties:
        members:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatPreview'
              - $ref: '#/components/schemas/GroupPreview'
    ChatPreview:
      title: ChatPreview
      description: "This object represents the preview of a single chat"
      type: object
      properties:
        chatid:
          $ref: '#/components/schemas/conversationid'
        user:
          $ref: '#/components/schemas/User'
        lastmessage:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/PhotoMessage'
    Chat:
      title: Chat
      description: "This object represents a single private chat"
      type: object
      properties:
        conversationid:
          $ref: '#/components/parameters/conversationid'
        user:
          $ref: '#/components/schemas/User'
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
    GroupPreview:
      title: GroupPreview
      description: "This object represents the preview of a single groupchat"
      type: object
      properties:
        chatid:
          $ref: '#/components/schemas/conversationid'
        user:
          $ref: '#/components/schemas/User'
        lastmessage:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/PhotoMessage'
    Group:
      title: Group
      description: "This object represents a single group"
      type: object
      properties:
        conversationid:
          $ref: '#/components/parameters/conversationid'
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          minItems: 2
          uniqueItems: true
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
        groupname:
          type: string
        grouphoto:
          type: string
          format: byte
    TextMessage:
      title: TextMessage
      description: "This object represents a single text message"
      type: object
      properties:
        messageid:
          $ref: '#/components/schemas/messageid'
        timestamp:
          type: string
          format: date-time
        content:
          type: string
          minLength: 1
        username:
          $ref: '#/components/schemas/username'
        checkmarks:
          type: number
          minimum: 0
          maximum: 2
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
          uniqueItems: true
        sentbyme:
          type: boolean
        replyingto:
          oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
    PhotoMessage:
      title: PhotoMessage
      description: "This object represents a single photo message"
      type: object
      properties:
        messageid:
          $ref: '#/components/schemas/messageid'
        timestamp:
          type: string
          format: date-time
        content:
          type: string
          format: byte
        username:
          $ref: '#/components/schemas/username'
        checkmarks:
          type: number
          minimum: 0
          maximum: 2
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
          uniqueItems: true
        replyingto:
          oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
        sentbyme:
          type: boolean
    Reaction:
      title: Reaction
      description: "This object represents a single reaction to a message"
      type: object
      properties:
        reactionid:
          $ref: '#/components/schemas/reactionid'
        sender:
          $ref: '#/components/schemas/username'
        emoticon:
          type: string
          enum: ["laugh", "sad", "thumbs_up", "surprised", "love", "pray"]
        sentbyme:
          type: boolean
  parameters:
    username:
      schema:
        $ref: '#/components/schemas/username'  
      name: username
      in: path
      description: Username
      required: true
    conversationid:
      schema:
        $ref: '#/components/schemas/conversationid'
      name: conversationid
      in: path
      description: ID of every conversation, associated both with the preview and the actual conversation
      required: true
    messageid:
      schema:
        $ref: '#/components/schemas/messageid'
      name: messageid
      in: path
      description: id of a single message
      required: true
    reactionid:
      schema:
        $ref: '#/components/schemas/reactionid'
      name: reactionid
      in: path
      description: id of a single reaction
      required: true
  securitySchemes:
    userID: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
