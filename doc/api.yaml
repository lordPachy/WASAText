openapi: 3.0.0
info:
  description: WASAText app backend REST API.
  title: WASAText API
  version: 1.0.0
  contact:
    name: Francesco Calzona
    email: calzona.2046920@studenti.uniroma1.it
    url: www.placeholder.com
  license:
    name: ECL-2.0
    url: https://opensource.org/licenses/ECL-2.0

servers:
    - url: http://wasatext.com/v1

tags:
    - name: conversations
      description: Actions concerning groups or private chats
    - name: groups
      description: Actions concerning a given specific group
    - name: login
      description: Actions concerning login
    - name: messaging
      description: Actions concerning a specific message
    - name: user settings
      description: Actions concerning user settings

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: Username
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^*'
                  minLength: 3
                  maxLength: 16
              example:
                UserExample:
                  properties:
                    name: Maria
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: access token
                properties:
                  identifier:
                    type: string
                    pattern: '^*'
                    minLength: 4
                    maxLength: 16
                    example: "abcdef012345"
                example:
                  UserToken:
                    properties:
                      identifier: alsdfkgnj34902857

  /session/settings/username:
    put:
      tags: ["user settings"]
      summary: Sets username
      description: |-
        It sets the username of the logged in user.
        This username will be showed to other people through messages sent,
        and it will be used to find them. 
      operationId: setMyUserName
      requestBody:
        description: username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
            example:
              Maria
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Username updated successfully
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: The username tried out is already in use
  /session/settings/profilepicture:
    put:
      tags: ["user settings"]
      summary: Sets profile picture
      description: |-
        It sets the profile picture of the logged in user.
        This profile picture will be showed to other users.
      operationId: setMyPhoto
      requestBody:
        description: photo to be uploaded
        content:
          image/png:
            schema:
              description: photo
              type: string
              pattern: '^0b*'
              minLength: 3
              maxLength: 16
              format: binary
            example: "0b00010010100"
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Prohile picture updated successfully
  /session/conversations:
    get:
      tags: ["conversations"]
      summary: Gets all conversations
      description: |-
        It gets all the conversations (both private chats and groups) for the specified user.
      operationId: getMyConversations
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Conversations obtained successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Conversations'
  /session/conversations/{conversationid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    get:
      tags: ["conversations"]
      summary: Gets a conversation
      description: |-
        It retrieves a specific conversation (be it a private chat or a group for a specific user).
      operationId: getConversation
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Conversation obtained successfully
          content: 
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Chat'
                  - $ref: '#/components/schemas/Group'
              example:
                conversationid: 10
                members:
                - username: Fabio
                  propic: "0b00010010100"
                - username: Maria
                  propic: "0b00010010110"
                messages: 
                - messageid: 1
                  timestamp: "2017-07-21T17:32:28Z"
                  content: Hello
                  username: Mario
                  checkmarks: 1
                  comments: []
                  replyingto: 20
                groupname: Family
                groupphoto: "0b00010010100" 
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: ["messaging"]
      summary: Send a message
      description: |-
        It sends a message to a specific conversation (be it in a private chat or a group for a specific user).
      operationId: sendMessage
      requestBody:
        description: message to be sent
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TextMessage'
                - $ref: '#/components/schemas/PhotoMessage'
            example:
                messageid: 1
                timestamp: "2017-07-21T17:32:28Z"
                content: Hello
                username: Mario
                checkmarks: 1
                comments: []
                replyingto: 20
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Message sent
        '404':
          $ref: '#/components/responses/ConversationNotFound'
    delete:
      tags: ["groups"]
      summary: Leave a group
      description: |-
       If the current conversation is a group, it leaves the group. Otherwise, it throws an error.
      operationId: leaveGroup
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Group left successfully
        '403': 
          description: The current conversation is not a group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': 
          $ref: '#/components/responses/ConversationNotFound'
  /session/conversations/{conversationid}/settings/groupname:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    put:
      tags: ["groups"]
      summary: Sets group name
      description: It sets the name of a group.
      operationId: setGroupName
      requestBody:
        description: groupname
        content:
          application/json:
            schema:
              description: group name
              type: string
              pattern: '^*'
              minLength: 3
              maxLength: 16
            example: Family
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Name updated successfully
        '404':
          $ref: '#/components/responses/ConversationNotFound'
  /session/conversations/{conversationid}/settings/grouphoto:
    parameters:
      - $ref: '#/components/parameters/conversationid'
    put:
      tags: ["groups"]
      summary: Updates group photo
      description: |-
        It sets the photo of a group.
      operationId: setGroupPhoto
      requestBody:
        description: group photo
        content:
          image/png:
            schema:
              description: groupphoto
              type: string
              pattern: '^0b*'
              minLength: 3
              maxLength: 16
              format: byte
            example: "0b00010010100"
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Group photo updated successfully
        '404':
          $ref: '#/components/responses/ConversationNotFound'
  /session/conversations/{conversationid}/{messageid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
      - $ref: '#/components/parameters/messageid'
    put:
      tags: ["messaging"]
      summary: Comment a message
      description: |-
        It puts a single comment to a message.
      operationId: commentMessage
      requestBody:
        description: comment to be put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Comment added
        '404':
          description: Conversation and/or message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
        tags: ["messaging"]
        summary: Forward a message
        description: |-
          It forwards a message to another chat (be it a private chat or a group).
        operationId: forwardMessage
        requestBody:
          description: conversation where message is forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationid'
          required: true
        responses:
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '204':
            description: Message forwarded
          '404':
            $ref: '#/components/responses/ConversationNotFound'
    delete:
      tags: ["messaging"]
      summary: Delete a message
      description: |-
        It deletes a sent message.
      operationId: deleteMessage
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Message deleted
        '403':
          description: Message was not sent by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/ConversationNotFound'
  /session/conversations/{conversationid}/{messageid}/{commentid}:
    parameters:
      - $ref: '#/components/parameters/conversationid'
      - $ref: '#/components/parameters/messageid'
      - $ref: '#/components/parameters/commentid'
    delete:
      tags: ["messaging"]
      summary: Delete a comment
      description: |-
        It deletes a comment to a given message.
      operationId: uncommentMessage
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: Comment deleted
        '403':
          description: Comment was not sent by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation and/or message and/or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session/conversations/new:
    put:
      tags: ["groups"]
      summary: Add to group
      description: |-
        It adds a person to a group via a username. If the group does not exist, it creates it. If the adder is not in the group, an error is thrown.
      operationId: addToGroup
      requestBody:
        description: user and group
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                    $ref: '#/components/schemas/username'
                group:
                    $ref: '#/components/schemas/conversationid'
            example:
              username: Paolo
              group: 2050
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '202':
          description: A new group with that user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '204':
          description: User added successfully
        '403':
          description: Users can only be added in groups the adder takes part in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation and/or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    username:
      title: username
      description: This object represents a username
      type: string
      example: Maria
      pattern: '^*'
      minLength: 3
      maxLength: 16
    conversationid:
      title: conversationid
      description: This object represents a conversation id
      type: integer
      example: 1
    messageid:
      title: message id
      description: This object represents a message id
      type: integer
      example: 1
    commentid:
      title: comment id
      description: This object represents a comment id
      type: integer
      example: 1
    User:
      title: User
      description: This object represents a single user
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        propic:
          type: string
          description: profile picture
          format: binary
          pattern: '^0b*'
          minLength: 3
          maxLength: 16
          example: "0b00010010100"
      example:
        username: Fabio
        propic: "0b00010010100"
    Conversations:
      title: Conversations
      description: This object represents the whole list of a single user's Conversations
      type: object
      properties:
        members:
          description: started chats
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatPreview'
              - $ref: '#/components/schemas/GroupPreview'
          example: []
      example:
        members: []
    ChatPreview:
      title: ChatPreview
      description: "This object represents the preview of a single chat"
      type: object
      properties:
        chatid:
          $ref: '#/components/schemas/conversationid'
        user:
          $ref: '#/components/schemas/User'
        lastmessage:
          description: Preview of the last message
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/PhotoMessage'
      example:
        conversationid: 50
        user:
          username: Fabio
          propic: "0b00010010100"
        lastmessage:
          messageid: 1
          timestamp: "2017-07-21T17:32:28Z"
          content: Hello
          username: Mario
          checkmarks: 1
          comments: []
          replyingto: 20
    Chat:
      title: Chat
      description: "This object represents a single private chat"
      type: object
      properties:
        conversationid:
          $ref: '#/components/schemas/conversationid'
        user:
          $ref: '#/components/schemas/User'
        messages:
          type: array
          description: Messages of the chat
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
          example:
            - messageid: 1
              timestamp: "2017-07-21T17:32:28Z"
              content: Hello
              username: Mario
              checkmarks: 1
              comments: []
              replyingto: 20
      example:
        conversationid: 50
        user:
          username: Fabio
          propic: "0b00010010100"
        messages:
          - messageid: 1
            timestamp: "2017-07-21T17:32:28Z"
            content: Hello
            username: Mario
            checkmarks: 1
            comments: []
            replyingto: 20
    GroupPreview:
      title: GroupPreview
      description: "This object represents the preview of a single groupchat"
      type: object
      properties:
        chatid:
          $ref: '#/components/schemas/conversationid'
        user:
          $ref: '#/components/schemas/User'
        lastmessage:
          description: Preview of the last messsage
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/PhotoMessage'
      example:
        chatid: 50
        user:
          username: Fabio
          propic: "0b00010010100"
        lastmessage:
          messageid: 1
          timestamp: "2017-07-21T17:32:28Z"
          content: Hello
          username: Mario
          checkmarks: 1
          comments: []
          replyingto: 20
    Group:
      title: Group
      description: "This object represents a single group"
      type: object
      properties:
        conversationid:
          $ref: '#/components/schemas/conversationid'
        members:
          type: array
          description: group members
          items:
            $ref: '#/components/schemas/User'
          minItems: 2
          uniqueItems: true
          example:
            - username: Fabio
              propic: "0b00010010100"
            - username: Maria
              propic: "0b00010010110"
        messages:
          type: array
          description: Messages of the chat
          items:
            oneOf:
              - $ref: '#/components/schemas/TextMessage'
              - $ref: '#/components/schemas/PhotoMessage'
          minItems: 1
          example:
            - messageid: 1
              timestamp: "2017-07-21T17:32:28Z"
              content: Hello
              username: Mario
              checkmarks: 1
              comments: []
              replyingto: 20
        groupname:
          type: string
          description: Name of the group
          pattern: '^*'
          minLength: 3
          maxLength: 16
          example: Family
        groupphoto:
          type: string
          description: Photo of the group
          format: byte
          pattern: '^0b*'
          minLength: 3
          maxLength: 16
          example: "0b00010010100"
      example:
        conversationid: 10
        members:
          - username: Fabio
            propic: "0b00010010100"
          - username: Maria
            propic: "0b00010010110"
        messages: 
          - messageid: 1
            timestamp: "2017-07-21T17:32:28Z"
            content: Hello
            username: Mario
            checkmarks: 1
            comments: []
            replyingto: 20
        groupname: Family
        groupphoto: "0b00010010100"

    TextMessage:
      title: TextMessage
      description: "This object represents a single text message"
      type: object
      properties:
        messageid:
          $ref: '#/components/schemas/messageid'
        timestamp:
          type: string
          description: Sent time of the message
          format: date-time
          pattern: '^*'
          minLength: 3
          maxLength: 30
          example: "2017-07-21T17:32:28Z"
        content:
          type: string
          description: Text of the message
          pattern: '^*'
          minLength: 1
          maxLength: 16
          example: Hello
        username:
          $ref: '#/components/schemas/username'     # sender's username
        checkmarks:
          type: number
          description: A single checkmark means that all recipients have received the message; a double one that everyone has read
          example: 1
          minimum: 0
          maximum: 2
        comments:
          type: array
          description: Comments to the message
          items:
            $ref: '#/components/schemas/Comment'
          uniqueItems: true
          example: []
        sentbyme:
          description: Boolean indicating whether the message was sent by myself
          type: boolean
          example: true
        replyingto:
          $ref: '#/components/schemas/messageid'
      example:
        messageid: 1
        timestamp: "2017-07-21T17:32:28Z"
        content: Hello
        username: Mario
        checkmarks: 1
        comments: []
        replyingto: 20
    PhotoMessage:
      title: PhotoMessage
      description: "This object represents a single photo message"
      type: object
      properties:
        messageid:
          $ref: '#/components/schemas/messageid'
        timestamp:
          type: string
          description: Sent time of the message
          pattern: '^*'
          minLength: 3
          maxLength: 30
          format: date-time
          example: "2017-07-21T17:32:28Z"
        content:
          type: string
          description: Text of the message
          format: byte
          pattern: '^0b*'
          minLength: 3
          maxLength: 16
          example: "0b00010010100"
        username:
          $ref: '#/components/schemas/username'     # sender's username
        checkmarks:
          type: number
          description: A single checkmark means that all recipients have received the message; a double one that everyone has read
          minimum: 0
          maximum: 2
          example: 1
        comments:
          type: array
          description: Comments to the message
          items:
            $ref: '#/components/schemas/Comment'
          uniqueItems: true
          example: []
        replyingto:
          $ref: '#/components/schemas/messageid'
        sentbyme:
          type: boolean
          description: Boolean indicating whether the message was sent by myself
          example: true
      example:
        messageid: 1
        timestamp: "2017-07-21T17:32:28Z"
        content: "0b00010010100"
        username: Mario
        checkmarks: 1
        comments: []
        replyingto: 20
    Comment:
      title: Comment
      description: "This object represents a single comment to a message"
      type: object
      properties:
        commentid:
          $ref: '#/components/schemas/commentid'
        sender:
          $ref: '#/components/schemas/username'
        reaction:
          type: string
          description: Reaction emoji
          pattern: '^*'
          minLength: 3
          maxLength: 16
          enum: ["laugh", "sad", "thumbs_up", "surprised", "love", "pray"]
          example: sad
        sentbyme:
          description: Boolean indicating whether the message was sent by myself          
          type: boolean
          example: false
      example:
        commentid: 15
        sender: Gioia
        reaction: sad
        sentbyme: false
    Error:
      type: object
      description: A generic error message
      properties:
        code:
          description: HTTP error code
          type: number
          example: 401
        message:
          description: error message
          type: string
          pattern: '^*'
          minLength: 3
          maxLength: 50
          example: UnauthorizedError
      required:
        - code
        - message
      example:
        code: 401
        message: UnauthorizedError
  parameters:
    conversationid:
      schema:
        $ref: '#/components/schemas/conversationid'
      example: 1
      name: conversationid
      in: path
      description: ID of every conversation, associated both with the preview and the actual conversation
      required: true
    messageid:
      schema:
        $ref: '#/components/schemas/messageid'
      example: 1
      name: messageid
      in: path
      description: id of a single message
      required: true
    commentid:
      schema:
        $ref: '#/components/schemas/commentid'
      example: 1
      name: commentid
      in: path
      description: id of a single comment
      required: true
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: UnauthorizedError 
    ConversationNotFound:
        description: The conversation id give was not found
        content:
            application/json:
                schema:
                    $ref: '#/components/schemas/Error'
                example:
                  code: 401
                  message: UnauthorizedError
  securitySchemes:
    userID: # arbitrary name for the security scheme
      type: http
      description: The logging token of a single user
      scheme: bearer
      bearerFormat: JWT  # optional, for documentation purposes only

security:
  - userID: []