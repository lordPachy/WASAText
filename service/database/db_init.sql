PRAGMA foreign_keys = ON;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS messagecomments;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS groupmessages;
DROP TABLE IF EXISTS groupmembers;
DROP TABLE IF EXISTS groupchats;
DROP TABLE IF EXISTS privmessages;
DROP TABLE IF EXISTS privchats;
DROP TABLE IF EXISTS users;
CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE NOT NULL, propic TEXT);
CREATE TABLE privchats (id INTEGER PRIMARY KEY, member1 TEXT NOT NULL, member2 TEXT NOT NULL, FOREIGN KEY (member1) REFERENCES users(username) ON UPDATE CASCADE, FOREIGN KEY (member2) REFERENCES users(username) ON UPDATE CASCADE);
CREATE TABLE privmessages (id INTEGER PRIMARY KEY, messageID INTEGER UNIQUE NOT NULL, FOREIGN KEY (id) REFERENCES privchats(id));
CREATE TABLE groupchats (id INTEGER PRIMARY KEY, groupname TEXT NOT NULL, groupphoto TEXT);
CREATE TABLE groupmembers (id INTEGER PRIMARY KEY, member TEXT NOT NULL, FOREIGN KEY (member) REFERENCES users(username) ON UPDATE CASCADE, FOREIGN KEY (id) REFERENCES groupchats(id));
CREATE TABLE groupmessages (id INTEGER PRIMARY KEY, messageID INTEGER UNIQUE NOT NULL, FOREIGN KEY (id) REFERENCES groupchats(id));
CREATE TABLE messages (id INTEGER PRIMARY KEY, sender TEXT NOT NULL, created_at TIMESTAMP NOT NULL, content TEXT, photo TEXT, checkmarks INTEGER NOT NULL, replying_to INTEGER, FOREIGN KEY (sender) REFERENCES users(username) ON UPDATE CASCADE, FOREIGN KEY (replying_to) REFERENCES messages(id));
CREATE TABLE messagecomments (id INTEGER PRIMARY KEY, commentID INTEGER UNIQUE NOT NULL, FOREIGN KEY (id) REFERENCES messages(id) ON DELETE CASCADE);
CREATE TABLE comments (id INTEGER PRIMARY KEY, sender TEXT NOT NULL, reaction TEXT NOT NULL, FOREIGN KEY (sender) REFERENCES users(username) ON UPDATE CASCADE, FOREIGN KEY (id) REFERENCES messagecomments(commentID) ON DELETE CASCADE);


